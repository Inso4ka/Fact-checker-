Техническое задание (Technical Specification) Цель: Разработка Telegram-бота для проверки достоверности утверждений (фактчекер), который будет принимать текстовое сообщение от пользователя и возвращать структурированный отчет о его истинности с указанием источников. Scope (входит в MVP): поддержка текстовых запросов на русском языке, использование внешнего API (Perplexity API) для поиска и анализа информации, генерация структурированного отчета с гипотезами, планом проверки, таблицей доказательств и итоговым выводом, обязательный раздел с источниками в конце ответа. Scope (не входит в MVP): проверка изображений и видео, автоматическое определение языка, многоступенчатая беседа, интеграция с другими мессенджерами. Глоссарий: aiogram — асинхронный фреймворк для Telegram ботов на Python, Perplexity API — внешний сервис для поиска и анализа информации, OSINT — разведка по открытым источникам. User Stories: как пользователь, я хочу отправить утверждение боту и получить отчет о том, правда это или ложь; как пользователь, я хочу видеть ссылки на источники, чтобы самому проверить достоверность; как пользователь, я хочу получать структурированный и понятный отчет, а не длинный текст без структуры; как пользователь, я хочу получить сообщение об ошибке, если утверждение не удалось проверить. Функциональные требования: F1 обработка входящих сообщений — бот принимает текст, проверяет, что это не пустое сообщение, и передает в модуль фактчекинга. F2 формирование запроса — бот оборачивает сообщение пользователя в системный промт (с инструкцией для OSINT-аналитика). F3 запрос к Perplexity API — бот формирует HTTP-запрос с API-ключом, отправляет промт и получает ответ. F4 форматирование ответа — бот возвращает пользователю готовый отчет, включающий гипотезы, план верификации, анализ источников, таблицу доказательств, вывод и список ссылок. F5 обработка ошибок — если API недоступно, бот возвращает сообщение «Сервис временно недоступен, попробуйте позже». Нефункциональные требования: производительность — ответ пользователю не должен превышать 10 секунд при нормальной загрузке API; безопасность — API-ключ хранится в переменных окружения, все пользовательские данные считаются недоверенными; масштабируемость — бот должен поддерживать работу с десятками пользователей одновременно за счет асинхронной архитектуры; UX/UI — ответы структурированы, включают заголовки, маркированные списки и таблицы в виде простого текста. Технологический стек: Python 3.10+, aiogram 3.x, requests или httpx для работы с Perplexity API, Docker для изоляции и деплоя, Redis (опционально) для кэширования запросов и ограничения частоты. Структура проекта: factchecker_bot/ app/ handlers/user_handlers.py (обработка сообщений), services/factcheck.py (формирование промта и работа с API), utils/config.py (чтение переменных окружения), bot.py (инициализация бота). data/ (логи и временные данные), .env (BOT_TOKEN, PERPLEXITY_API_KEY), requirements.txt, Dockerfile. Этапы разработки (Roadmap): неделя 1 — настройка окружения, создание бота, обработка сообщений, базовый ответ-заглушка; неделя 2 — интеграция с Perplexity API, формирование системного промта; неделя 3 — обработка ошибок, структурирование ответа, возврат источников; неделя 4 — оптимизация, настройка логирования и деплой на VPS. Требования к безопасности: все запросы к API выполняются только по HTTPS, ключ API хранится в .env и не коммитится в репозиторий, ограничение числа запросов в минуту на одного пользователя, фильтрация входных сообщений (отсечение слишком длинных запросов более 1000 символов). Инфраструктура: сервер Ubuntu 22.04 LTS, 2 ядра CPU, 2 ГБ RAM, 20 ГБ SSD, исходящий канал от 50 Мбит/с, деплой через Docker Compose. Мониторинг и логирование: использование модуля logging Python с ротацией логов, запись user_id, текста запроса, времени ответа и ошибок, мониторинг доступности бота через cron-скрипт. План тестирования: модульное тестирование функций формирования промта и парсинга ответа, интеграционное тестирование работы с API, нагрузочное тестирование при одновременных запросах от 10 пользователей. Возможные риски: перегрузка или недоступность Perplexity API (решение — кэширование, fallback-ответ), превышение лимитов API (решение — ограничение количества запросов от одного пользователя), некорректная работа промта (решение — тестирование и уточнение формулировок).