import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from openai import AsyncOpenAI

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not PERPLEXITY_API_KEY:
    raise ValueError("PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

perplexity_client = AsyncOpenAI(
    api_key=PERPLEXITY_API_KEY,
    base_url="https://api.perplexity.ai"
)

OSINT_SYSTEM_PROMPT = """–í—ã ‚Äî —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

–°–¢–†–û–ì–û —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):

<b>–í–´–í–û–î:</b> [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è] –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ/–ª–æ–∂–Ω–æ/—á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ

<b>–û–ë–û–°–ù–û–í–ê–ù–ò–ï:</b> [2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è] –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã

<b>–ò–°–¢–û–ß–ù–ò–ö–ò:</b>
[URL 1]
[URL 2]
[URL 3]

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –í—Å–µ–≥–¥–∞ –ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –±—É–∫–≤–∞–º–∏: "–í–´–í–û–î:", "–û–ë–û–°–ù–û–í–ê–ù–ò–ï:", "–ò–°–¢–û–ß–ù–ò–ö–ò:"
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b></b> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ * –∏–ª–∏ ** (—Ç–æ–ª—å–∫–æ <b></b>)
- –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ 2-3 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø—Ä—è–º–æ –æ–± —ç—Ç–æ–º —Å–∫–∞–∂–∏—Ç–µ
- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–º)"""


async def check_fact(user_message: str) -> str:
    try:
        response = await perplexity_client.chat.completions.create(
            model="sonar-pro",
            messages=[
                {"role": "system", "content": OSINT_SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            max_tokens=2000,
            temperature=0.2
        )
        
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–∞: {e}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å."
    )


@dp.message()
async def handle_message(message: Message):
    if not message.text:
        return
    
    processing_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    
    try:
        result = await check_fact(message.text)
        
        await processing_msg.delete()
        
        if len(result) <= 4096:
            await message.answer(result, parse_mode="HTML")
        else:
            chunks = [result[i:i+4096] for i in range(0, len(result), 4096)]
            for chunk in chunks:
                await message.answer(chunk, parse_mode="HTML")
                await asyncio.sleep(0.1)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.delete()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )


async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ fact-checker –±–æ—Ç–∞...")
    logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
