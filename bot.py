import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from openai import AsyncOpenAI
import asyncpg

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_USERNAME = "itroyen"
ADMIN_CHAT_ID_ENV = os.getenv("ADMIN_CHAT_ID")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not PERPLEXITY_API_KEY:
    raise ValueError("PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

perplexity_client = AsyncOpenAI(
    api_key=PERPLEXITY_API_KEY,
    base_url="https://api.perplexity.ai"
)

db_pool: Optional[asyncpg.Pool] = None
admin_chat_id: Optional[int] = None


def load_system_prompt() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç system prompt –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("system_prompt.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.error("–§–∞–π–ª system_prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ system_prompt.txt: {e}")
        raise


OSINT_SYSTEM_PROMPT = load_system_prompt()


async def load_admin_chat_id():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç admin_chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global admin_chat_id
    
    if ADMIN_CHAT_ID_ENV:
        admin_chat_id = int(ADMIN_CHAT_ID_ENV)
        logger.info(f"‚úÖ Admin chat ID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {admin_chat_id}")
        await save_admin_chat_id(admin_chat_id)
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow(
            "SELECT value FROM config WHERE key = 'admin_chat_id'"
        )
        if result:
            admin_chat_id = int(result['value'])
            logger.info(f"‚úÖ Admin chat ID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î: {admin_chat_id}")
        else:
            logger.warning(f"‚ö†Ô∏è Admin chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç @{ADMIN_USERNAME}")


async def save_admin_chat_id(chat_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç admin_chat_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO config (key, value, updated_at)
            VALUES ('admin_chat_id', $1, NOW())
            ON CONFLICT (key)
            DO UPDATE SET value = $1, updated_at = NOW()
            """,
            str(chat_id)
        )
    logger.info(f"‚úÖ Admin chat ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {chat_id}")


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î"""
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    await load_admin_chat_id()


async def close_db():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global db_pool
    if db_pool:
        await db_pool.close()
        logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow(
            "SELECT expires_at FROM subscriptions WHERE user_id = $1",
            user_id
        )
        
        if not result:
            return False
        
        expires_at = result['expires_at']
        return datetime.now() < expires_at


async def grant_subscription(user_id: int, username: Optional[str], duration: str) -> bool:
    """–í—ã–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    durations = {
        "1m": timedelta(minutes=1),
        "1d": timedelta(days=1),
        "1M": timedelta(days=30),
        "6M": timedelta(days=180),
        "1y": timedelta(days=365)
    }
    
    if duration not in durations:
        return False
    
    expires_at = datetime.now() + durations[duration]
    
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO subscriptions (user_id, username, expires_at)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id) 
            DO UPDATE SET expires_at = $3, username = $2
            """,
            user_id, username, expires_at
        )
    
    return True


async def revoke_subscription(user_id: int) -> bool:
    """–û—Ç–±–∏—Ä–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_pool.acquire() as conn:
        result = await conn.execute(
            "DELETE FROM subscriptions WHERE user_id = $1",
            user_id
        )
        return result != "DELETE 0"


async def list_subscriptions() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT user_id, username, expires_at, created_at
            FROM subscriptions
            ORDER BY expires_at DESC
            """
        )
        return [dict(row) for row in rows]


async def cleanup_expired_subscriptions():
    """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with db_pool.acquire() as conn:
        result = await conn.execute(
            "DELETE FROM subscriptions WHERE expires_at < $1",
            datetime.now()
        )
        if result != "DELETE 0":
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {result}")


async def subscription_cleanup_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        try:
            await asyncio.sleep(600)
            await cleanup_expired_subscriptions()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


async def check_fact(user_message: str) -> str:
    try:
        response = await perplexity_client.chat.completions.create(
            model="sonar-pro",
            messages=[
                {"role": "system", "content": OSINT_SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            max_tokens=2000,
            temperature=0.2
        )
        
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–∞: {e}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"


@dp.message(Command("start"))
async def cmd_start(message: Message):
    global admin_chat_id
    
    if message.from_user.username == ADMIN_USERNAME and admin_chat_id is None:
        admin_chat_id = message.from_user.id
        await save_admin_chat_id(admin_chat_id)
        logger.info(f"‚úÖ Admin chat ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {admin_chat_id}")
    
    has_subscription = await check_subscription(message.from_user.id)
    
    if has_subscription:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤.\n\n"
            "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å."
        )
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤.\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}"
        )


@dp.message(Command("grant"))
async def cmd_grant(message: Message):
    global admin_chat_id
    
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if admin_chat_id is None:
        admin_chat_id = message.from_user.id
        await save_admin_chat_id(admin_chat_id)
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <user_id> <duration>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:\n"
                "‚Ä¢ 1m - 1 –º–∏–Ω—É—Ç–∞\n"
                "‚Ä¢ 1d - 1 –¥–µ–Ω—å\n"
                "‚Ä¢ 1M - 1 –º–µ—Å—è—Ü\n"
                "‚Ä¢ 6M - 6 –º–µ—Å—è—Ü–µ–≤\n"
                "‚Ä¢ 1y - 1 –≥–æ–¥\n\n"
                "–ü—Ä–∏–º–µ—Ä: /grant 123456789 1M"
            )
            return
        
        user_id = int(parts[1])
        duration = parts[2]
        
        success = await grant_subscription(user_id, None, duration)
        
        if success:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –ø–µ—Ä–∏–æ–¥ {duration}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("revoke"))
async def cmd_revoke(message: Message):
    global admin_chat_id
    
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if admin_chat_id is None:
        admin_chat_id = message.from_user.id
        await save_admin_chat_id(admin_chat_id)
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /revoke 123456789"
            )
            return
        
        user_id = int(parts[1])
        success = await revoke_subscription(user_id)
        
        if success:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("list"))
async def cmd_list(message: Message):
    global admin_chat_id
    
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if admin_chat_id is None:
        admin_chat_id = message.from_user.id
        await save_admin_chat_id(admin_chat_id)
    
    try:
        subs = await list_subscriptions()
        
        if not subs:
            await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        
        for sub in subs:
            user_id = sub['user_id']
            username = sub['username'] or "N/A"
            expires = sub['expires_at'].strftime("%Y-%m-%d %H:%M")
            created = sub['created_at'].strftime("%Y-%m-%d %H:%M")
            
            text += f"üë§ ID: <code>{user_id}</code>\n"
            text += f"   Username: @{username}\n"
            text += f"   –°–æ–∑–¥–∞–Ω–∞: {created}\n"
            text += f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}\n\n"
        
        if len(text) > 4096:
            chunks = [text[i:i+4096] for i in range(0, len(text), 4096)]
            for chunk in chunks:
                await message.answer(chunk, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("mystatus"))
async def cmd_mystatus(message: Message):
    try:
        async with db_pool.acquire() as conn:
            result = await conn.fetchrow(
                "SELECT expires_at FROM subscriptions WHERE user_id = $1",
                message.from_user.id
            )
        
        if result:
            expires = result['expires_at'].strftime("%Y-%m-%d %H:%M")
            await message.answer(
                f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}"
            )
        else:
            await message.answer(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}"
            )
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message()
async def handle_message(message: Message):
    global admin_chat_id
    
    if not message.text:
        return
    
    if message.from_user.username == ADMIN_USERNAME and admin_chat_id is None:
        admin_chat_id = message.from_user.id
        await save_admin_chat_id(admin_chat_id)
        logger.info(f"‚úÖ Admin chat ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {admin_chat_id}")
    
    has_subscription = await check_subscription(message.from_user.id)
    
    if not has_subscription:
        await message.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}\n\n"
            f"–í–∞—à ID: <code>{message.from_user.id}</code>",
            parse_mode="HTML"
        )
        
        if admin_chat_id:
            try:
                username = message.from_user.username or "–±–µ–∑ username"
                await bot.send_message(
                    admin_chat_id,
                    f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
                    f"ID: <code>{message.from_user.id}</code>\n"
                    f"Username: @{username}\n"
                    f"–ò–º—è: {message.from_user.full_name}\n\n"
                    f"–î–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    f"<code>/grant {message.from_user.id} 1M</code>",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")
        else:
            logger.warning(f"–ù–µ –º–æ–≥—É —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ - admin_chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É (/grant, /revoke, /list)")
        
        return
    
    processing_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    
    try:
        async with db_pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO subscriptions (user_id, username, expires_at, created_at)
                VALUES ($1, $2, (SELECT expires_at FROM subscriptions WHERE user_id = $1), NOW())
                ON CONFLICT (user_id) 
                DO UPDATE SET username = $2
                """,
                message.from_user.id,
                message.from_user.username
            )
        
        result = await check_fact(message.text)
        
        await processing_msg.delete()
        
        if len(result) <= 4096:
            await message.answer(result, parse_mode="HTML")
        else:
            chunks = [result[i:i+4096] for i in range(0, len(result), 4096)]
            for chunk in chunks:
                await message.answer(chunk, parse_mode="HTML")
                await asyncio.sleep(0.1)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.delete()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )


async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ fact-checker –±–æ—Ç–∞...")
    
    await init_db()
    
    asyncio.create_task(subscription_cleanup_task())
    
    logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    logger.info(f"üë§ –ê–¥–º–∏–Ω: @{ADMIN_USERNAME}")
    
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await close_db()


if __name__ == "__main__":
    asyncio.run(main())
