import asyncio
import logging
from aiogram import Bot
from app.db.repositories.subscriptions import SubscriptionRepository
from app.services.notifications import NotificationService
from app.constants import CLEANUP_INTERVAL_SECONDS
from app.config import config

logger = logging.getLogger(__name__)


async def subscription_cleanup_task(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
    notification_service = NotificationService(bot)
    
    try:
        while True:
            try:
                await asyncio.sleep(CLEANUP_INTERVAL_SECONDS)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                expired_subs = await SubscriptionRepository.get_expired()
                
                if expired_subs:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    for sub in expired_subs:
                        user_id = sub['user_id']
                        username = sub.get('username')
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_notified = await notification_service.notify_subscription_expired(user_id)
                        if user_notified:
                            logger.info(f"üì¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        await notification_service.notify_admins_subscription_expired(
                            config.admin_chat_ids,
                            user_id,
                            username or "–Ω–µ—Ç username"
                        )
                        logger.info(f"üì¢ –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}")
                    
                    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    deleted_count = await SubscriptionRepository.delete_expired()
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {deleted_count}")
            
            except asyncio.CancelledError:
                # –ü–æ–∑–≤–æ–ª—è–µ–º –∑–∞–¥–∞—á–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                logger.info("üõë –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                raise
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                await asyncio.sleep(CLEANUP_INTERVAL_SECONDS)
    
    except asyncio.CancelledError:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        raise
