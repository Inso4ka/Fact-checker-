import logging
import asyncio
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import Bot

from app.config import config
from app.services.subscriptions import SubscriptionService
from app.services.notifications import NotificationService
from app.clients.perplexity import check_fact
from app.utils.text import split_message
from app.utils.notification_cache import is_user_notified, mark_user_notified
from app.constants import MOSCOW_TZ
from datetime import timezone

logger = logging.getLogger(__name__)

user_router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.admin_chat_ids


@user_router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    response = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤.\n\n"
    response += f"üÜî –í–∞—à Telegram ID: <code>{user_id}</code>\n\n"
    
    if is_admin(user_id):
        response += "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n\n"
        response += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        response += "‚Ä¢ /grant <user_id> <duration> - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        response += "‚Ä¢ /revoke <user_id> - –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        response += "‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
        response += "‚Ä¢ /mystatus - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É"
    else:
        has_subscription = await SubscriptionService.check_active(user_id)
        
        if has_subscription:
            response += "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            response += "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å."
        else:
            response += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            response += f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            response += "üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: @itroyen, @JaffarUgerr\n\n"
            response += "–ö–æ–º–∞–Ω–¥—ã:\n"
            response += "‚Ä¢ /mystatus - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"
    
    await message.answer(response, parse_mode="HTML")


@user_router.message(Command("mystatus"))
async def cmd_mystatus(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not message.from_user:
        return
    
    try:
        sub = await SubscriptionService.get_user_subscription(message.from_user.id)
        
        if sub:
            # –ë–î –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç naive datetime (UTC), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            expires_utc = sub['expires_at'].replace(tzinfo=timezone.utc)
            moscow_time = expires_utc.astimezone(MOSCOW_TZ)
            expires = moscow_time.strftime("%Y-%m-%d %H:%M")
            await message.answer(
                f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires} (–ú–°–ö)"
            )
        else:
            await message.answer(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                f"üÜî –í–∞—à ID: <code>{message.from_user.id}</code>\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n"
                f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: @itroyen, @JaffarUgerr",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /mystatus: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@user_router.message()
async def handle_message(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not message.text or not message.from_user:
        return
    
    user_id = message.from_user.id
    has_subscription = await SubscriptionService.check_active(user_id)
    
    if not has_subscription:
        await message.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            f"üÜî –í–∞—à ID: <code>{user_id}</code>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: @itroyen, @JaffarUgerr",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not is_user_notified(user_id):
            mark_user_notified(user_id)
            
            notification_service = NotificationService(bot)
            await notification_service.notify_admins_new_user(
                config.admin_chat_ids,
                user_id,
                message.from_user.username or "–±–µ–∑ username",
                message.from_user.full_name or "Unknown"
            )
            logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}")
        
        return
    
    processing_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await SubscriptionService.update_username(user_id, message.from_user.username or None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç —á–µ—Ä–µ–∑ Perplexity AI
        result = await check_fact(message.text)
        
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π)
        chunks = split_message(result)
        for i, chunk in enumerate(chunks):
            await message.answer(chunk, parse_mode="HTML")
            if i < len(chunks) - 1:
                await asyncio.sleep(0.1)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.delete()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )
