import logging
import asyncio
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot
from decimal import Decimal

from app.config import config
from app.services.subscriptions import SubscriptionService
from app.services.notifications import NotificationService
from app.clients.perplexity import check_fact
from app.clients.robokassa_client import robokassa_client
from app.db.repositories.payments import PaymentRepository
from app.db.pool import get_pool
from app.utils.text import split_message
from app.utils.notification_cache import is_user_notified, mark_user_notified
from app.utils.crypto import hash_user_id
from app.constants import MOSCOW_TZ
from datetime import timezone

logger = logging.getLogger(__name__)

user_router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.admin_chat_ids


@user_router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    response = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤.\n\n"
    response += f"üÜî –í–∞—à Telegram ID: <code>{user_id}</code>\n\n"
    
    if is_admin(user_id):
        response += "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n\n"
        response += "–£ –≤–∞—Å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
        response += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        response += "‚Ä¢ /grant &lt;user_id&gt; &lt;duration&gt; - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        response += "‚Ä¢ /revoke &lt;user_id&gt; - –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        response += "‚Ä¢ /revokeall - –û—Ç–æ–∑–≤–∞—Ç—å –í–°–ï –ø–æ–¥–ø–∏—Å–∫–∏\n"
        response += "‚Ä¢ /hash &lt;user_id&gt; - –ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à –ø–æ ID\n"
        response += "‚Ä¢ /mystatus - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É"
        await message.answer(response, parse_mode="HTML")
    else:
        has_subscription = await SubscriptionService.check_active(user_id)
        
        if has_subscription:
            response += "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            response += "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å."
            await message.answer(response, parse_mode="HTML")
        else:
            response += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            response += "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü - 1000‚ÇΩ", callback_data="pay:1m:1000")],
                [InlineKeyboardButton(text="üìÖ –ü–æ–ª–≥–æ–¥–∞ - 3600‚ÇΩ", callback_data="pay:6m:3600")],
                [InlineKeyboardButton(text="üìÖ –ì–æ–¥ - 6000‚ÇΩ", callback_data="pay:1y:6000")]
            ])
            
            await message.answer(response, reply_markup=keyboard, parse_mode="HTML")


@user_router.callback_query(lambda c: c.data and c.data.startswith("pay:"))
async def process_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if not callback.data or not callback.from_user:
        return
    
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º callback data: pay:1m:1000
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    duration = parts[1]  # 1m, 6m, 1y
    price = int(parts[2])  # 1000, 3600, 6000
    
    user_id = callback.from_user.id
    hashed_id = hash_user_id(user_id, config.hash_salt)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        pool = get_pool()
        payment_repo = PaymentRepository(pool)
        
        invoice_id = await payment_repo.create_payment(
            user_id=hashed_id,
            amount=Decimal(str(price)),
            duration=duration,
            telegram_user_id=user_id
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_url = robokassa_client.generate_payment_link(
            invoice_id=invoice_id,
            amount=Decimal(str(price)),
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration}"
        )
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        duration_text = {
            "1m": "1 –º–µ—Å—è—Ü",
            "6m": "6 –º–µ—Å—è—Ü–µ–≤",
            "1y": "1 –≥–æ–¥"
        }.get(duration, duration)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]
        ])
        
        await callback.message.answer(
            f"üí∞ <b>–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: #{invoice_id}\n"
            f"üìÖ –¢–∞—Ä–∏—Ñ: {duration_text}\n"
            f"üíµ –°—É–º–º–∞: {price}‚ÇΩ\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂ #{invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({duration}, {price}‚ÇΩ)")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {str(e)}")


@user_router.message(Command("mystatus"))
async def cmd_mystatus(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not message.from_user:
        return
    
    try:
        sub = await SubscriptionService.get_user_subscription(message.from_user.id)
        
        if sub:
            # –ë–î –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç naive datetime (UTC), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            expires_utc = sub['expires_at'].replace(tzinfo=timezone.utc)
            moscow_time = expires_utc.astimezone(MOSCOW_TZ)
            expires = moscow_time.strftime("%Y-%m-%d %H:%M")
            await message.answer(
                f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires} (–ú–°–ö)"
            )
        else:
            await message.answer(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                f"üÜî –í–∞—à ID: <code>{message.from_user.id}</code>\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n"
                f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @kroove",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /mystatus: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@user_router.message()
async def handle_message(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not message.text or not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_admin(user_id):
        has_subscription = await SubscriptionService.check_active(user_id)
        
        if not has_subscription:
            await message.answer(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                f"üÜî –í–∞—à ID: <code>{user_id}</code>\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n"
                f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @kroove",
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
            # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not is_user_notified(user_id):
                mark_user_notified(user_id)
                
                notification_service = NotificationService(bot)
                await notification_service.notify_admins_new_user(
                    config.admin_chat_ids,
                    user_id,
                    message.from_user.username or "–±–µ–∑ username",
                    message.from_user.full_name or "Unknown"
                )
                logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}")
            
            return
    
    processing_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç —á–µ—Ä–µ–∑ Perplexity AI
        result = await check_fact(message.text)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            await processing_msg.delete()
        except Exception as del_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ: {del_error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π)
        chunks = split_message(result)
        for i, chunk in enumerate(chunks):
            try:
                await message.answer(chunk, parse_mode="HTML")
            except Exception as send_error:
                # –ï—Å–ª–∏ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å HTML: {send_error}")
                await message.answer(chunk)
            
            if i < len(chunks) - 1:
                await asyncio.sleep(0.1)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await processing_msg.delete()
        except:
            pass
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )
