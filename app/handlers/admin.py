import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import Bot

from app.config import config
from app.services.subscriptions import SubscriptionService
from app.services.notifications import NotificationService
from app.utils.text import split_message
from app.utils.notification_cache import clear_user_notification

logger = logging.getLogger(__name__)

admin_router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.admin_chat_ids


@admin_router.message(Command("grant"))
async def cmd_grant(message: Message, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not message.from_user or not message.text:
        return
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <user_id> <duration>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:\n"
                "‚Ä¢ 1m - 1 –º–∏–Ω—É—Ç–∞\n"
                "‚Ä¢ 1d - 1 –¥–µ–Ω—å\n"
                "‚Ä¢ 1W - 1 –Ω–µ–¥–µ–ª—è\n"
                "‚Ä¢ 1M - 1 –º–µ—Å—è—Ü\n"
                "‚Ä¢ 6M - 6 –º–µ—Å—è—Ü–µ–≤\n"
                "‚Ä¢ 1y - 1 –≥–æ–¥\n\n"
                "–ü—Ä–∏–º–µ—Ä: /grant 123456789 1M"
            )
            return
        
        user_id = int(parts[1])
        duration = parts[2]
        
        success, expires_at = await SubscriptionService.grant(user_id, duration)
        
        if success and expires_at:
            # –û—á–∏—â–∞–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á–µ—Ç, –∞–¥–º–∏–Ω —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            clear_user_notification(user_id)
            
            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –ø–µ—Ä–∏–æ–¥ {duration}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_service = NotificationService(bot)
            await notification_service.notify_subscription_granted(user_id, duration, expires_at)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /grant: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Command("revoke"))
async def cmd_revoke(message: Message, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not message.from_user or not message.text:
        return
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /revoke 123456789"
            )
            return
        
        user_id = int(parts[1])
        success = await SubscriptionService.revoke(user_id)
        
        if success:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_service = NotificationService(bot)
            await notification_service.notify_subscription_revoked(user_id)
        else:
            await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /revoke: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Command("hash"))
async def cmd_hash(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞ –ø–æ user_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not message.from_user or not message.text:
        return
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hash &lt;user_id&gt;\n\n"
                "–ü—Ä–∏–º–µ—Ä: /hash 123456789",
                parse_mode="HTML"
            )
            return
        
        user_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞–º –±—É–¥–µ—Ç —Ö–µ—à)
        sub = await SubscriptionService.get_user_subscription(user_id)
        
        if sub:
            await message.answer(
                f"üîê –•–µ—à –¥–ª—è ID <code>{user_id}</code>:\n\n"
                f"<code>{sub['user_id']}</code>",
                parse_mode="HTML"
            )
        else:
            await message.answer(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /hash: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Command("revokeall"))
async def cmd_revokeall(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∑—ã–≤–∞ –í–°–ï–• –ø–æ–¥–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not message.from_user:
        return
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        count = await SubscriptionService.revoke_all()
        
        if count > 0:
            await message.answer(
                f"üóëÔ∏è –û—Ç–æ–∑–≤–∞–Ω–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {count}\n\n"
                f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
            )
        else:
            await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–∑—ã–≤–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /revokeall: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
