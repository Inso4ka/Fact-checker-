import logging
from datetime import datetime
from typing import Optional
from aiogram import Bot
from app.services.subscriptions import SubscriptionService

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def notify_subscription_granted(
        self, 
        user_id: int, 
        duration: str, 
        expires_at: datetime
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            duration_text = SubscriptionService.format_duration(duration)
            expires_str = SubscriptionService.format_datetime_moscow(expires_at)
            
            await self.bot.send_message(
                user_id,
                f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞!\n\n"
                f"‚è∞ –°—Ä–æ–∫: {duration_text}\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_str} (–ú–°–ö)\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –ª—é–±—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤."
            )
            return True
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def notify_subscription_revoked(self, user_id: int) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            await self.bot.send_message(
                user_id,
                f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return True
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def notify_admins_new_user(
        self, 
        admin_ids: list[int], 
        user_id: int, 
        username: str, 
        full_name: str
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"""
        for admin_id in admin_ids:
            try:
                await self.bot.send_message(
                    admin_id,
                    f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
                    f"ID: <code>{user_id}</code>\n"
                    f"Username: @{username}\n"
                    f"–ò–º—è: {full_name}\n\n"
                    f"–î–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    f"<code>/grant {user_id} 1M</code>",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    
    
    async def notify_admins_subscription_expired(
        self, 
        admin_ids: list[int], 
        user_id_hash: str
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for admin_id in admin_ids:
            try:
                await self.bot.send_message(
                    admin_id,
                    f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–∞:\n\n"
                    f"ID Hash: <code>{user_id_hash[:16]}...</code>\n\n"
                    f"–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ ID –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id} –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
