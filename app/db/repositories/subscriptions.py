from datetime import datetime, timezone
from typing import Optional
import asyncpg
import logging
from app.db.pool import get_pool
from app.models.subscription import SubscriptionRecord
from app.utils.crypto import hash_user_id, hash_user_id_v2
from app.config import config

logger = logging.getLogger(__name__)


class SubscriptionRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ –ë–î"""
    
    @staticmethod
    async def check_active(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
        pool = get_pool()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –Ω–æ–≤–æ–º—É —Ö–µ—à—É (Argon2 —Å —Å–æ–ª—å—é)
        new_hash, new_salt = hash_user_id_v2(user_id, config.hash_pepper)
        
        async with pool.acquire() as conn:
            result = await conn.fetchrow(
                "SELECT user_id, salt, expires_at FROM subscriptions WHERE user_id = $1 AND salt IS NOT NULL",
                new_hash
            )
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É —Ö–µ—à—É - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫
            if result:
                expires_at = result['expires_at']
                now_utc_naive = datetime.now(timezone.utc).replace(tzinfo=None)
                return now_utc_naive < expires_at
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É - –∏—â–µ–º –ø–æ —Å—Ç–∞—Ä–æ–º—É SHA256 —Ö–µ—à—É (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏)
            old_hash = hash_user_id(user_id, config.hash_salt)
            result = await conn.fetchrow(
                "SELECT user_id, salt, expires_at FROM subscriptions WHERE user_id = $1 AND salt IS NULL",
                old_hash
            )
            
            if not result:
                return False
            
            # –ù–∞—à–ª–∏ —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å - –º–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞ –Ω–æ–≤—ã–π —Ö–µ—à
            expires_at = result['expires_at']
            now_utc_naive = datetime.now(timezone.utc).replace(tzinfo=None)
            
            if now_utc_naive < expires_at:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –º–∏–≥—Ä–∏—Ä—É–µ–º
                logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å SHA256 –Ω–∞ Argon2id")
                await conn.execute(
                    """
                    UPDATE subscriptions 
                    SET user_id = $1, salt = $2 
                    WHERE user_id = $3
                    """,
                    new_hash, new_salt, old_hash
                )
                return True
            
            return False
    
    @staticmethod
    async def create_or_update(
        user_id: int, 
        expires_at: datetime
    ) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —Å –Ω–æ–≤—ã–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        pool = get_pool()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Argon2id —Ö–µ—à
        hashed_id, salt = hash_user_id_v2(user_id, config.hash_pepper)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ naive UTC datetime –¥–ª—è PostgreSQL TIMESTAMP
        naive_expires = expires_at.replace(tzinfo=None) if expires_at.tzinfo else expires_at
        now_naive = datetime.now(timezone.utc).replace(tzinfo=None)
        
        async with pool.acquire() as conn:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é SHA256 –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            old_hash = hash_user_id(user_id, config.hash_salt)
            await conn.execute(
                "DELETE FROM subscriptions WHERE user_id = $1 AND salt IS NULL",
                old_hash
            )
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é Argon2 –∑–∞–ø–∏—Å—å
            await conn.execute(
                """
                INSERT INTO subscriptions (user_id, salt, expires_at, created_at)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) 
                DO UPDATE SET expires_at = $3, salt = $2
                """,
                hashed_id, salt, naive_expires, now_naive
            )
    
    @staticmethod
    async def delete(user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ç–∏–ø–∞ —Ö–µ—à–µ–π)"""
        pool = get_pool()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ –Ω–æ–≤–æ–º—É —Ö–µ—à—É
        new_hash, _ = hash_user_id_v2(user_id, config.hash_pepper)
        
        async with pool.acquire() as conn:
            result = await conn.execute(
                "DELETE FROM subscriptions WHERE user_id = $1",
                new_hash
            )
            
            if result != "DELETE 0":
                return True
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É - —É–¥–∞–ª—è–µ–º –ø–æ —Å—Ç–∞—Ä–æ–º—É
            old_hash = hash_user_id(user_id, config.hash_salt)
            result = await conn.execute(
                "DELETE FROM subscriptions WHERE user_id = $1",
                old_hash
            )
            return result != "DELETE 0"
    
    @staticmethod
    async def get_all() -> list[SubscriptionRecord]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        pool = get_pool()
        async with pool.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT user_id, salt, expires_at, created_at
                FROM subscriptions
                ORDER BY expires_at DESC
                """
            )
            return [dict(row) for row in rows]  # type: ignore
    
    @staticmethod
    async def get_by_user_id(user_id: int) -> Optional[SubscriptionRecord]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ user_id (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ç–∏–ø–∞ —Ö–µ—à–µ–π)"""
        pool = get_pool()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –Ω–æ–≤–æ–º—É —Ö–µ—à—É
        new_hash, _ = hash_user_id_v2(user_id, config.hash_pepper)
        
        async with pool.acquire() as conn:
            result = await conn.fetchrow(
                "SELECT user_id, salt, expires_at, created_at FROM subscriptions WHERE user_id = $1",
                new_hash
            )
            
            if result:
                return dict(result)  # type: ignore
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É - –∏—â–µ–º –ø–æ —Å—Ç–∞—Ä–æ–º—É
            old_hash = hash_user_id(user_id, config.hash_salt)
            result = await conn.fetchrow(
                "SELECT user_id, salt, expires_at, created_at FROM subscriptions WHERE user_id = $1",
                old_hash
            )
            return dict(result) if result else None  # type: ignore
    
    @staticmethod
    async def get_expired() -> list[SubscriptionRecord]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"""
        pool = get_pool()
        now_utc_naive = datetime.now(timezone.utc).replace(tzinfo=None)
        
        async with pool.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT user_id, salt, expires_at, created_at
                FROM subscriptions
                WHERE expires_at < $1
                """,
                now_utc_naive
            )
            return [dict(row) for row in rows]  # type: ignore
    
    @staticmethod
    async def delete_expired() -> int:
        """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö"""
        pool = get_pool()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º naive UTC datetime –¥–ª—è PostgreSQL
        now_utc_naive = datetime.now(timezone.utc).replace(tzinfo=None)
        
        async with pool.acquire() as conn:
            result = await conn.execute(
                "DELETE FROM subscriptions WHERE expires_at < $1",
                now_utc_naive
            )
            
            if result == "DELETE 0":
                return 0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ "DELETE N"
            count = int(result.split()[-1])
            return count
    
