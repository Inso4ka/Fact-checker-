"""Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Robokassa"""
import logging
from aiohttp import web
from app.clients.robokassa_client import RobokassaClient
from app.db.repositories.payments import PaymentRepository
from app.db.pool import get_pool
from app.services.subscriptions import SubscriptionService
from app.config import config
from aiogram import Bot

logger = logging.getLogger(__name__)


async def handle_result_url(request: web.Request) -> web.Response:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ResultURL - webhook –æ—Ç Robokassa –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    
    Robokassa –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
    - OutSum: —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
    - InvId: ID –ø–ª–∞—Ç–µ–∂–∞ (invoice_id)
    - SignatureValue: –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∏–ª–∏ GET –∑–∞–ø—Ä–æ—Å–∞
    data = await request.post() if request.method == 'POST' else request.query
    
    out_sum = data.get('OutSum', '')
    inv_id = data.get('InvId', '')
    signature = data.get('SignatureValue', '')
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Robokassa: InvId={inv_id}, OutSum={out_sum}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if not RobokassaClient.verify_signature(out_sum, inv_id, signature):
        logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook: InvId={inv_id}")
        return web.Response(text=f"bad sign", status=400)
    
    try:
        invoice_id = int(inv_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î
        pool = get_pool()
        payment_repo = PaymentRepository(pool)
        payment = await payment_repo.get_payment(invoice_id)
        
        if not payment:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ #{invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return web.Response(text=f"OK{inv_id}", status=200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if payment['status'] == 'paid':
            logger.info(f"–ü–ª–∞—Ç–µ–∂ #{invoice_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return web.Response(text=f"OK{inv_id}", status=200)
        
        # –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
        await payment_repo.mark_as_paid(invoice_id)
        
        # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        duration = payment['duration']
        user_hashed_id = payment['user_id']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        duration_mapping = {
            '1m': '1M',
            '6m': '6M',
            '1y': '1y'
        }
        subscription_duration = duration_mapping.get(duration, '1M')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        expires_at = await SubscriptionService.grant_subscription(
            user_hashed_id,
            subscription_duration
        )
        
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ #{invoice_id} (—Ö–µ—à: {user_hashed_id[:16]}..., –¥–æ {expires_at})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot: Bot = request.app['bot']
        telegram_user_id = payment.get('telegram_user_id')
        
        if telegram_user_id:
            duration_text = {
                "1m": "1 –º–µ—Å—è—Ü",
                "6m": "6 –º–µ—Å—è—Ü–µ–≤",
                "1y": "1 –≥–æ–¥"
            }.get(duration, duration)
            
            try:
                await bot.send_message(
                    chat_id=telegram_user_id,
                    text=f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                         f"üìã –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: #{invoice_id}\n"
                         f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {duration_text}\n"
                         f"üíµ –°—É–º–º–∞: {out_sum}‚ÇΩ\n\n"
                         f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expires_at.strftime('%Y-%m-%d %H:%M')} (–ú–°–ö)",
                    parse_mode="HTML"
                )
                logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ #{invoice_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_user_id}")
            except Exception as notify_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_user_id}: {notify_error}")
        
        logger.info(f"üí∞ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ #{invoice_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç Robokassa
        return web.Response(text=f"OK{inv_id}", status=200)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(text=f"OK{inv_id}", status=200)


async def handle_success_url(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ SuccessURL - —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    inv_id = request.query.get('InvId', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    return web.Response(
        text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: #{inv_id}. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
        content_type='text/html; charset=utf-8'
    )


async def handle_fail_url(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ FailURL - —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    return web.Response(
        text="‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        content_type='text/html; charset=utf-8'
    )


def create_webhook_app(bot: Bot) -> web.Application:
    """–°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook"""
    app = web.Application()
    app['bot'] = bot
    
    app.router.add_route('*', '/robokassa/result', handle_result_url)
    app.router.add_route('*', '/robokassa/success', handle_success_url)
    app.router.add_route('*', '/robokassa/fail', handle_fail_url)
    
    return app
